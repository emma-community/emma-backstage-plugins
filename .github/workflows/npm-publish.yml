name: Build and Publish NPM Packages

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      # Step to checkout code from the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step to set up Node.js with caching
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org/'
          always-auth: true

      # Step to fetch tags from the git repository
      - name: Fetch tags
        run: git fetch --tags

      # Step to get the latest git tag
      - name: Get latest tag
        id: get_latest_tag
        run: |
          latest_tag=$(git describe --tags --abbrev=0)
          echo "latest_tag=$latest_tag" >> $GITHUB_ENV

      # Step to get the current package version from package.json
      - name: Get package version
        id: get_package_version
        run: |
          package_version=$(node -e "console.log(require('./package.json').version)")
          echo "package_version=$package_version" >> $GITHUB_ENV

      # Install semver to compare version numbers accurately
      - name: Install semver
        run: npm install -g semver

      # Compare the package version with the latest tag and publish if package version is greater
      - name: Compare versions and publish if greater
        run: |
          echo "Latest Tag: ${{ env.latest_tag }}"
          echo "Package Version: ${{ env.package_version }}"

          LATEST_TAG_VERSION="${{ env.latest_tag }}"

          if [[ "$LATEST_TAG_VERSION" == v* ]]; then
            LATEST_TAG_VERSION="${LATEST_TAG_VERSION:1}"
          fi

          echo "Latest Tag Version (stripped): $LATEST_TAG_VERSION"

          # Compare the versions using semver
          if npx semver "$LATEST_TAG_VERSION" "<" "${{ env.package_version }}"; then
            echo "New version detected. Publishing..."

            # Install yarn
            npm install -g yarn

            # Compile, build, and test
            yarn install 
            yarn tsc 
            yarn build:all
            yarn test

            # Publish packages to NPM
            npm publish ./plugins/emma-common/
            npm publish ./plugins/emma-backend/
            npm publish ./plugins/emma/

            # Create Git tag for the new version
            git tag "v${{ env.package_version }}"
            git push origin "v${{ env.package_version }}"
          else
            echo "No new version. Skipping publish."
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
