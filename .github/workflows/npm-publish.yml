name: Build and Publish NPM Packages

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      # Step to checkout code from the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step to set up Node.js with caching
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org/'
          always-auth: true

      # Step to fetch tags from the git repository
      - name: Fetch tags
        run: git fetch --tags

      # Step to get the latest git tag
      - name: Get latest tag
        id: get_latest_tag        
        run: echo "::set-output name=latest_tag::$(git tag --sort=-v:refname | head -n 1)"

      # Step to get the current package version from package.json
      - name: Get package version
        id: get_package_version
        run: echo "::set-output name=package_version::$(node -e "console.log(require('./package.json').version)")"

      # Compare the package version with the latest tag and publish if package version is greater
      - name: Compare versions and publish if greater
        run: |
          LATEST_TAG_VERSION=${{ steps.get_latest_tag.outputs.latest_tag }}
          PACKAGE_VERSION=${{ steps.get_package_version.outputs.package_version }}

          echo "Latest Tag: $LATEST_TAG_VERSION"
          echo "Package Version: $PACKAGE_VERSION"

          # Strip 'v' from the tag if it exists
          if [[ "$LATEST_TAG_VERSION" == v* ]]; then
            LATEST_TAG_VERSION="${LATEST_TAG_VERSION:1}"
          fi

          echo "Latest Tag Version (stripped): $LATEST_TAG_VERSION"

          # Compare the versions
          if [[ "$(echo -e "$PACKAGE_VERSION\n$LATEST_TAG_VERSION" | sort -V | tail -n 1)" == "$PACKAGE_VERSION" && "$PACKAGE_VERSION" != "$LATEST_TAG_VERSION" ]]; then
            echo "New version detected. Publishing..."

            # Install yarn
            npm install -g yarn

            # Compile, build, and test
            yarn install 
            yarn tsc 
            yarn build:all
            yarn test

            # Publish packages to NPM
            npm publish ./plugins/emma-common/
            npm publish ./plugins/emma-backend/
            npm publish ./plugins/emma/

            # Create Git tag for the new version
            git tag "v$PACKAGE_VERSION"
            git push origin "v$PACKAGE_VERSION"
          else
            echo "No new version. Skipping publish."
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
